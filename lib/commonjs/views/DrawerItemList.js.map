{"version":3,"sources":["DrawerItemList.tsx"],"names":["DrawerItemList","state","navigation","descriptors","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","itemStyle","labelStyle","buildLink","routes","map","route","i","focused","index","onPress","event","emit","type","target","key","canPreventDefault","defaultPrevented","dispatch","DrawerActions","closeDrawer","CommonActions","navigate","name","title","drawerLabel","drawerIcon","options","undefined","params"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;;;;;;;AAaA;AACA;AACA;AACe,SAASA,cAAT,CAAwB;AACrCC,EAAAA,KADqC;AAErCC,EAAAA,UAFqC;AAGrCC,EAAAA,WAHqC;AAIrCC,EAAAA,eAJqC;AAKrCC,EAAAA,iBALqC;AAMrCC,EAAAA,qBANqC;AAOrCC,EAAAA,uBAPqC;AAQrCC,EAAAA,SARqC;AASrCC,EAAAA;AATqC,CAAxB,EAUL;AACR,QAAMC,SAAS,GAAG,6BAAlB;AAEA,SAAQT,KAAK,CAACU,MAAN,CAAaC,GAAb,CAAiB,CAACC,KAAD,EAAQC,CAAR,KAAc;AACrC,UAAMC,OAAO,GAAGD,CAAC,KAAKb,KAAK,CAACe,KAA5B;;AAEA,UAAMC,OAAO,GAAG,MAAM;AACpB,YAAMC,KAAK,GAAGhB,UAAU,CAACiB,IAAX,CAAgB;AAC5BC,QAAAA,IAAI,EAAE,aADsB;AAE5BC,QAAAA,MAAM,EAAER,KAAK,CAACS,GAFc;AAG5BC,QAAAA,iBAAiB,EAAE;AAHS,OAAhB,CAAd;;AAMA,UAAI,CAACR,OAAD,IAAY,CAACG,KAAK,CAACM,gBAAvB,EAAyC;AACvCtB,QAAAA,UAAU,CAACuB,QAAX,CAAoB,EAClB,IAAIV,OAAO,GACPW,sBAAcC,WAAd,EADO,GAEPC,sBAAcC,QAAd,CAAuBhB,KAAK,CAACiB,IAA7B,CAFJ,CADkB;AAIlBT,UAAAA,MAAM,EAAEpB,KAAK,CAACqB;AAJI,SAApB;AAMD;AACF,KAfD;;AAiBA,UAAM;AAAES,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA;AAAtB,QAAqC9B,WAAW,CAACU,KAAK,CAACS,GAAP,CAAX,CAAuBY,OAAlE;AAEA,wBACE,oBAAC,mBAAD;AACE,MAAA,GAAG,EAAErB,KAAK,CAACS,GADb;AAEE,MAAA,KAAK,EACHU,WAAW,KAAKG,SAAhB,GACIH,WADJ,GAEID,KAAK,KAAKI,SAAV,GACAJ,KADA,GAEAlB,KAAK,CAACiB,IAPd;AASE,MAAA,IAAI,EAAEG,UATR;AAUE,MAAA,OAAO,EAAElB,OAVX;AAWE,MAAA,eAAe,EAAEX,eAXnB;AAYE,MAAA,iBAAiB,EAAEC,iBAZrB;AAaE,MAAA,qBAAqB,EAAEC,qBAbzB;AAcE,MAAA,uBAAuB,EAAEC,uBAd3B;AAeE,MAAA,UAAU,EAAEE,UAfd;AAgBE,MAAA,KAAK,EAAED,SAhBT;AAiBE,MAAA,EAAE,EAAEE,SAAS,CAACG,KAAK,CAACiB,IAAP,EAAajB,KAAK,CAACuB,MAAnB,CAjBf;AAkBE,MAAA,OAAO,EAAEnB;AAlBX,MADF;AAsBD,GA5CO,CAAR;AA6CD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport DrawerItem from './DrawerItem';\nimport type {\n  DrawerNavigationHelpers,\n  DrawerDescriptorMap,\n  DrawerContentOptions,\n} from '../types';\n\ntype Props = Omit<DrawerContentOptions, 'contentContainerStyle' | 'style'> & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n  activeTintColor,\n  inactiveTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  itemStyle,\n  labelStyle,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate(route.name)),\n          target: state.key,\n        });\n      }\n    };\n\n    const { title, drawerLabel, drawerIcon } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        activeBackgroundColor={activeBackgroundColor}\n        inactiveBackgroundColor={inactiveBackgroundColor}\n        labelStyle={labelStyle}\n        style={itemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]}