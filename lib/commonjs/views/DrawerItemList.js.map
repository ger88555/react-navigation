{"version":3,"sources":["DrawerItemList.tsx"],"names":["DrawerItemList","state","navigation","descriptors","buildLink","routes","map","route","i","focused","index","onPress","event","emit","type","target","key","canPreventDefault","defaultPrevented","dispatch","DrawerActions","closeDrawer","CommonActions","navigate","name","title","drawerLabel","drawerIcon","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","drawerLabelStyle","drawerItemStyle","options","undefined","params"],"mappings":";;;;;;;AAAA;;AACA;;AAOA;;;;;;;;AASA;AACA;AACA;AACe,SAASA,cAAT,CAAwB;AACrCC,EAAAA,KADqC;AAErCC,EAAAA,UAFqC;AAGrCC,EAAAA;AAHqC,CAAxB,EAIL;AACR,QAAMC,SAAS,GAAG,6BAAlB;AAEA,SAAQH,KAAK,CAACI,MAAN,CAAaC,GAAb,CAAiB,CAACC,KAAD,EAAQC,CAAR,KAAc;AACrC,UAAMC,OAAO,GAAGD,CAAC,KAAKP,KAAK,CAACS,KAA5B;;AAEA,UAAMC,OAAO,GAAG,MAAM;AACpB,YAAMC,KAAK,GAAGV,UAAU,CAACW,IAAX,CAAgB;AAC5BC,QAAAA,IAAI,EAAE,aADsB;AAE5BC,QAAAA,MAAM,EAAER,KAAK,CAACS,GAFc;AAG5BC,QAAAA,iBAAiB,EAAE;AAHS,OAAhB,CAAd;;AAMA,UAAI,CAACR,OAAD,IAAY,CAACG,KAAK,CAACM,gBAAvB,EAAyC;AACvChB,QAAAA,UAAU,CAACiB,QAAX,CAAoB,EAClB,IAAIV,OAAO,GACPW,sBAAcC,WAAd,EADO,GAEPC,sBAAcC,QAAd,CAAuBhB,KAAK,CAACiB,IAA7B,CAFJ,CADkB;AAIlBT,UAAAA,MAAM,EAAEd,KAAK,CAACe;AAJI,SAApB;AAMD;AACF,KAfD;;AAiBA,UAAM;AACJS,MAAAA,KADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,qBAJI;AAKJC,MAAAA,uBALI;AAMJC,MAAAA,2BANI;AAOJC,MAAAA,6BAPI;AAQJC,MAAAA,gBARI;AASJC,MAAAA;AATI,QAUF9B,WAAW,CAACI,KAAK,CAACS,GAAP,CAAX,CAAuBkB,OAV3B;AAYA,wBACE,oBAAC,mBAAD;AACE,MAAA,GAAG,EAAE3B,KAAK,CAACS,GADb;AAEE,MAAA,KAAK,EACHU,WAAW,KAAKS,SAAhB,GACIT,WADJ,GAEID,KAAK,KAAKU,SAAV,GACAV,KADA,GAEAlB,KAAK,CAACiB,IAPd;AASE,MAAA,IAAI,EAAEG,UATR;AAUE,MAAA,OAAO,EAAElB,OAVX;AAWE,MAAA,eAAe,EAAEmB,qBAXnB;AAYE,MAAA,iBAAiB,EAAEC,uBAZrB;AAaE,MAAA,qBAAqB,EAAEC,2BAbzB;AAcE,MAAA,uBAAuB,EAAEC,6BAd3B;AAeE,MAAA,UAAU,EAAEC,gBAfd;AAgBE,MAAA,KAAK,EAAEC,eAhBT;AAiBE,MAAA,EAAE,EAAE7B,SAAS,CAACG,KAAK,CAACiB,IAAP,EAAajB,KAAK,CAAC6B,MAAnB,CAjBf;AAkBE,MAAA,OAAO,EAAEzB;AAlBX,MADF;AAsBD,GAtDO,CAAR;AAuDD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport DrawerItem from './DrawerItem';\nimport type { DrawerNavigationHelpers, DrawerDescriptorMap } from '../types';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate(route.name)),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerActiveTintColor,\n      drawerInactiveTintColor,\n      drawerActiveBackgroundColor,\n      drawerInactiveBackgroundColor,\n      drawerLabelStyle,\n      drawerItemStyle,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]}